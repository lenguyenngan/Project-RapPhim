import mongoose from "mongoose";
import SeatLock from "../model/SeatLock.js";
import Showtime from "../model/showtime.js";
import Booking from "../model/Booking.js";
import Cinema from "../model/Cinema.js";
import CinemaSystem from "../model/CinemaSystem.js";

// =======================================================
// ‚úÖ GI·ªÆ GH·∫æ (LOCK SEATS)
// =======================================================
export const lockSeats = async (req, res) => {
  try {
    const { showtimeId, seatNumbers, userId, userEmail } = req.body;

    // --- Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (
      !showtimeId ||
      !Array.isArray(seatNumbers) ||
      seatNumbers.length === 0
    ) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin su·∫•t chi·∫øu ho·∫∑c danh s√°ch gh·∫ø.",
      });
    }

    if (!userId || !userEmail) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng.",
      });
    }

    // --- Ki·ªÉm tra su·∫•t chi·∫øu t·ªìn t·∫°i
    const showtime = await Showtime.findById(showtimeId);
    if (!showtime) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y su·∫•t chi·∫øu.",
      });
    }

    const seatData = Array.isArray(showtime.seatData) ? showtime.seatData : [];

    // --- X√°c ƒë·ªãnh gh·∫ø ƒë√£ b·ªã chi·∫øm ho·∫∑c b√°n
    const occupiedSeats = new Set(
      seatData
        .filter(
          (s) =>
            s &&
            seatNumbers.includes(s.seatNumber) &&
            ["occupied", "sold"].includes(s.status)
        )
        .map((s) => s.seatNumber)
    );

    // --- L·∫•y danh s√°ch gh·∫ø ƒëang b·ªã gi·ªØ (lock)
    const activeLocks = await SeatLock.find({
      showtimeId,
      isActive: true,
      expiresAt: { $gt: new Date() },
      seatNumbers: { $in: seatNumbers },
    }).lean();

    const lockedSeats = new Set();
    for (const lock of activeLocks) {
      for (const sn of lock.seatNumbers) {
        if (seatNumbers.includes(sn)) lockedSeats.add(sn);
      }
    }

    // --- N·∫øu c√≥ gh·∫ø b·ªã chi·∫øm ho·∫∑c lock th√¨ tr·∫£ v·ªÅ l·ªói
    const conflictingSeats = Array.from(
      new Set([...occupiedSeats, ...lockedSeats])
    );
    if (conflictingSeats.length > 0) {
      return res.status(409).json({
        success: false,
        message: "M·ªôt s·ªë gh·∫ø ƒë√£ ƒë∆∞·ª£c gi·ªØ ho·∫∑c ƒë·∫∑t.",
        conflictingSeats,
      });
    }

    // --- H·ªßy c√°c lock c≈© ƒë√£ h·∫øt h·∫°n c·ªßa user
    await SeatLock.updateMany(
      { userId, showtimeId, isActive: true, expiresAt: { $lt: new Date() } },
      { $set: { isActive: false } }
    );

    // --- T·∫°o m·ªõi lock
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t
    const seatLock = await SeatLock.create({
      showtimeId,
      seatNumbers,
      userId,
      userEmail,
      expiresAt,
      isActive: true,
    });

    return res.status(200).json({
      success: true,
      message: "ƒê√£ gi·ªØ gh·∫ø th√†nh c√¥ng.",
      lockId: seatLock._id,
      expiresAt,
      expiresIn: Math.floor((expiresAt - new Date()) / 1000),
    });
  } catch (error) {
    console.error("‚ùå lockSeats error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi gi·ªØ gh·∫ø.",
      error: error.message,
    });
  }
};

// =======================================================
// ‚úÖ L·∫§Y DANH S√ÅCH GH·∫æ ƒêANG B·ªä GI·ªÆ
// =======================================================
export const getLockedSeats = async (req, res) => {
  try {
    const { showtimeId } = req.params;

    if (!showtimeId) {
      return res
        .status(400)
        .json({ success: false, message: "Thi·∫øu showtimeId." });
    }

    const lockedSeats = await SeatLock.find({
      showtimeId,
      isActive: true,
      expiresAt: { $gt: new Date() },
    }).select("seatNumbers userId userEmail expiresAt");

    // G·ªôp to√†n b·ªô gh·∫ø b·ªã gi·ªØ th√†nh 1 m·∫£ng
    const allLockedSeats = lockedSeats.flatMap((lock) =>
      lock.seatNumbers.map((seatNumber) => ({
        seatNumber,
        lockedBy: lock.userId,
        lockedByEmail: lock.userEmail,
        expiresAt: lock.expiresAt,
      }))
    );

    return res.status(200).json({
      success: true,
      lockedSeats: allLockedSeats,
    });
  } catch (error) {
    console.error("‚ùå getLockedSeats error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y gh·∫ø b·ªã gi·ªØ.",
      error: error.message,
    });
  }
};

// =======================================================
// ‚úÖ H·ª¶Y GI·ªÆ GH·∫æ (UNLOCK SEATS)
// =======================================================
export const unlockSeats = async (req, res) => {
  try {
    const { lockId, userId } = req.body;

    if (!lockId || !userId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin lockId ho·∫∑c userId.",
      });
    }

    const result = await SeatLock.updateOne(
      { _id: lockId, userId, isActive: true },
      { $set: { isActive: false } }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y lock ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy.",
      });
    }

    return res.status(200).json({
      success: true,
      message: "ƒê√£ h·ªßy gi·ªØ gh·∫ø th√†nh c√¥ng.",
    });
  } catch (error) {
    console.error("‚ùå unlockSeats error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi h·ªßy gi·ªØ gh·∫ø.",
      error: error.message,
    });
  }
};

// =======================================================
// ‚úÖ X√ÅC NH·∫¨N ƒê·∫∂T V√â (CONFIRM BOOKING) ‚Äî FIX COMBO DETAIL
// =======================================================
export const confirmBooking = async (req, res) => {
  try {
    const { lockId, userId, bookingData } = req.body;

    if (!lockId || !userId || !bookingData) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu lockId, userId ho·∫∑c bookingData.",
      });
    }

    const seatLock = await SeatLock.findById(lockId);
    if (!seatLock) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y lockId.",
      });
    }

    if (!seatLock.isActive) {
      return res.status(400).json({
        success: false,
        message: "Lock ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c.",
      });
    }

    // üü¢ L·∫•y th√¥ng tin combo chi ti·∫øt t·ª´ DB
    const comboDetails = [];
    if (
      Array.isArray(bookingData.selectedCombos) &&
      bookingData.selectedCombos.length > 0
    ) {
      for (const comboItem of bookingData.selectedCombos) {
        const combo = await Combo.findById(
          comboItem._id || comboItem.id
        ).lean();
        if (combo) {
          comboDetails.push({
            comboId: combo._id,
            name: combo.name,
            price: combo.price,
            quantity: comboItem.quantity || 1,
            totalPrice: combo.price * (comboItem.quantity || 1),
          });
        }
      }
    }

    // üü¢ T√≠nh t·ªïng combo (n·∫øu c√≥)
    const totalComboPrice = comboDetails.reduce(
      (sum, c) => sum + c.totalPrice,
      0
    );

    // üü¢ T·ªïng ti·ªÅn cu·ªëi c√πng (bao g·ªìm combo + v√©)
    const grandTotal = bookingData.total + totalComboPrice;

    // ‚úÖ T·∫°o booking
    const newBooking = new Booking({
      userId,
      showtimeId: seatLock.showtimeId,
      userEmail: bookingData.userEmail,
      movieTitle: bookingData.movieTitle,
      moviePoster: bookingData.moviePoster,

      cinemaInfo: {
        systemName: bookingData.systemName || "H·ªá th·ªëng r·∫°p",
        clusterName: bookingData.clusterName || "C·ª•m r·∫°p",
        hallName: bookingData.hallName || "Ph√≤ng chi·∫øu",
        systemId: bookingData.systemId,
        clusterId: bookingData.clusterId,
        hallId: bookingData.hallId,
      },

      showtimeInfo: {
        date: bookingData.date,
        startTime: bookingData.startTime,
        endTime: bookingData.endTime,
      },

      seats: bookingData.selectedSeats,
      combos: comboDetails, // ‚úÖ L∆∞u combo chi ti·∫øt
      total: grandTotal, // ‚úÖ G·ªìm c·∫£ ti·ªÅn combo

      paymentMethod: bookingData.paymentMethod,
      paymentStatus: "paid",
      bookingStatus: "confirmed",
      bookingCode: `BK${Date.now()}`,
      qrCode: `QR-${Date.now()}`,
    });

    await newBooking.save();

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i lock
    seatLock.isActive = false;
    seatLock.status = "confirmed";
    await seatLock.save();

    return res.status(200).json({
      success: true,
      message: "X√°c nh·∫≠n ƒë·∫∑t v√© th√†nh c√¥ng.",
      booking: newBooking,
    });
  } catch (error) {
    console.error("‚ùå confirmBooking error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi x√°c nh·∫≠n ƒë·∫∑t v√©.",
      error: error.message,
    });
  }
};
